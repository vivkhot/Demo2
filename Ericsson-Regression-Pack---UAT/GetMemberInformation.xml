<?xml version="1.0" encoding="UTF-8"?>
<con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetMemberInformation" searchProperties="true" id="57e3f781-922c-4e61-a072-46f74f63be47" xmlns:con="http://eviware.com/soapui/config"><con:settings><con:setting id="57e3f781-922c-4e61-a072-46f74f63be47fileName">GetMemberInformation</con:setting></con:settings><con:savedRecentRuns>1</con:savedRecentRuns><con:testStep type="jdbc" name="JDBC Request" id="47a6288f-948b-42ce-afb9-06c3ffdef852"><con:settings><con:setting id="prettyPrintResponse">true</con:setting></con:settings><con:config xsi:type="con:JdbcRequestTestStep" fetchSize="400" convertColumnNamesToUpperCase="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:dbConnectionName xsi:nil="true"/><con:driver>oracle.jdbc.driver.OracleDriver</con:driver><con:connectionString>jdbc:oracle:thin:swnprod/PASS_VALUE@Stauddbsw24:1521:DONSOS</con:connectionString><con:password>swnprod</con:password><con:connectionProperties/><con:query>select 
 m.member_id as BupaMemberId
,mr.registration_id as BupaRegistrationId
,mc.birth_date as DateOfBirth
,t.title_descr as Title 
,m.given_name as FirstName
,m.middle_initials as MiddleName
,m.family_name as LastName
,r.relationship_descr as RelationType
,nvl2(v.vip_descr,'true','false') AS VIP
,c.country_iso3_code as Nationality
,c1.country_iso3_code as ResidenceCountryCode
,mr.original_bi_joining_date as OriginalJoinDate
, null as SpecialHandling
,cs1.customer_status_descr 
|| sysdate
||null
|| null as MemberStatus
,nvl2(co.group_id,'Group','Individual') as Type
, g.gender_descr as Gender
,gr.parent_group_id 
|| gr1.group_name 
|| nvl2(v.vip_descr,'true','false')
||cs.customer_status_descr as Groups
,(select
(select * from 
(select unique mrc.member_id || rel.relationship_descr as Relation_type from 

member_reg_chronicles mrc,relationships rel where mrc.registration_id = (select 

mr.registration_id from member_registrations mr where mr.member_id = :memberid)
and mrc.relationship_code = rel.relationship_code
and mrc.member_id != :memberid
order by Relation_type
)
where 
rownum = 1)
||
(select * from 
(
select * from 
(select unique mrc.member_id || rel.relationship_descr as Relation_type from 

member_reg_chronicles mrc,relationships rel where mrc.registration_id = (select 

mr.registration_id from member_registrations mr where mr.member_id = :memberid)
and mrc.relationship_code = rel.relationship_code
and mrc.member_id != :memberid
)
where 
rownum &lt;= 2
order by Relation_type desc
)
where 
rownum = 1
)
||
(select * from 
(select unique mrc.member_id || rel.relationship_descr as Relation_type from 

member_reg_chronicles mrc,relationships rel where mrc.registration_id = (select 

mr.registration_id from member_registrations mr where mr.member_id = :memberid)
and mrc.relationship_code = rel.relationship_code
and mrc.member_id != :memberid
order by Relation_type desc
)
where 
rownum = 1) 
from
dual) as  RelationType
,a.address_id ||
a.care_of ||
a.company ||
a.house_name_number ||
a.street_1 ||
a.street_2 ||
a.street_3 ||
a.city_town ||
a.post_zip_code ||
c1.country_iso3_code ||
a.formatted_address ||
ma.address_occurrence_from_date ||
ma.address_occurrence_to_date ||
aty.address_type_descr as Address
,Null as Note
from
members m 
,member_registrations mr
,member_chronicles mc
,titles t
,member_reg_chronicles mrc
,relationships r
,vips v
,countries c
,countries c1
,member_addresses ma
,addresses a
,address_types aty
,contracts co
,member_products mp
,Genders g
, Groups gr
, Groups gr1
, customer_status cs
, customer_status cs1
, member_reg_addresses mra
,dual
where
m.member_id = :memberid
and mr.registration_id = (select max(mr1.registration_id)from member_registrations mr1 

where mr1.member_id = m.member_id)
and m.member_id = mr.member_id(+)
and m.member_id = mc.member_id
and mc.member_chronicle_date = (select max(mc1.member_chronicle_date)from 

member_chronicles mc1 where mc1.member_id = m.member_id)
and m.title_code = t.title_code
and m.member_id = mrc.member_id (+)
and mrc.relationship_code = r.relationship_code(+)
and mrc.mem_reg_chronicle_date = (select max(mrc1.mem_reg_chronicle_date) from 

member_reg_chronicles mrc1 where mrc1.member_id=m.member_id )
and m.vip_code = v.vip_code(+)
and m.nationality_code = c.nationality_code
and m.member_id = mra.member_id
and ma.address_id = a.address_id
/*and mra.address_id = a.address_id
and mra.address_type_code = 6*/
and a.country_code = c1.country_code
and m.member_id = mp.member_id
and mp.contract_pk = (select max(mp1.contract_pk)from member_products mp1 where 

mp1.member_id = m.member_id)
and co.contract_pk = mp.contract_pk
and t.gender_code = g.gender_code
and co.group_id = gr.group_id
and gr1.group_id= gr.parent_group_id
and cs.customer_status_code = gr1.customer_status_code
and cs1.customer_status_code = mr.customer_status_code
and ma.member_id = m.member_id
and rownum = 1</con:query><con:assertion type="JDBC Status" name="JDBC Status" id="5710f2ef-7a5f-45e5-bffd-b61d95dc23b4"/><con:properties><con:property><con:name>memberid</con:name><con:value>BI-6000-0164-6007</con:value></con:property></con:properties></con:config></con:testStep><con:testStep type="request" name="GetMemberInformation - Request 1" id="83f7aa9b-43a1-411d-a721-7883a22d0b13"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>BasicHttpBinding_MemberServiceInterface</con:interface><con:operation>GetMemberInformation</con:operation><con:request name="GetMemberInformation - Request 1" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="e3fe0297-41f1-4630-bcd8-558f7d5c8693"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>https://systest2-partners.services-api.bupa-intl.com/BupaPartnerGateway.svc</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:com="urn://com.bupa.bi.members.GetMemberInformation_v1_0">
      <soapenv:Header>
       <tpa_organization>Test</tpa_organization>
       <tpa_password>aPH8r1NTBT/4pQaiNvT7AhkxDVyJ2tso/qK15kgxML8=</tpa_password>
     </soapenv:Header>
   <soapenv:Body>
      <com:MemberInformationRequest>
         <com:RequestUsername>SHARMAR</com:RequestUsername>
         <com:BupaMemberId>BI-6000-0000-0280</com:BupaMemberId>
         <!--Optional:-->
         <com:QueryDate xsi:nil="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/>
      </com:MemberInformationRequest>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" name="SOAP Response" id="a2616930-f559-4755-ac8c-59af97c3670a" disabled="true"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="http://bupa.com/MemberService:getMemberInformationIn"/><con:wsrmConfig version="1.2"/><con:environmentSpec><con:entry environmentId="ffa02281-abee-4d92-9d74-c677c51cd899"><con:authProfile>Inherit From Parent</con:authProfile></con:entry><con:entry environmentId="da7c9196-ba3b-41d0-a66d-0a23ca4256ba"><con:authProfile>Inherit From Parent</con:authProfile></con:entry><con:entry environmentId="2e2d3644-d234-40cc-bc7a-aa84e98bab33"><con:authProfile>Inherit From Parent</con:authProfile></con:entry><con:entry environmentId="abef8391-6af3-433a-b3bb-9504a88cd8e9"><con:authProfile>Inherit From Parent</con:authProfile></con:entry><con:entry environmentId="6f08d644-a5bc-4490-920b-48a60b2d8e41"><con:authProfile>Inherit From Parent</con:authProfile></con:entry><con:entry environmentId="64e0791f-4ed5-4997-966c-88e83c52740b"><con:authProfile>Inherit From Parent</con:authProfile></con:entry><con:entry environmentId="6f2ca154-2593-4d31-9605-d7f796e04a87"><con:authProfile>Inherit From Parent</con:authProfile></con:entry><con:entry environmentId="5650c0e1-78a8-46fa-87b8-a891fcd675df"><con:authProfile>Inherit From Parent</con:authProfile></con:entry><con:entry environmentId="43d00641-0327-48c2-8143-b4a8c3cc7a15"><con:authProfile>Inherit From Parent</con:authProfile></con:entry><con:entry environmentId="d569c580-5769-4daf-af9e-5bf59356fdbc"><con:authProfile>Inherit From Parent</con:authProfile></con:entry><con:entry environmentId="838914ec-42f6-42ce-a432-f18913224d4a"><con:authProfile>Inherit From Parent</con:authProfile></con:entry><con:entry environmentId="4b1f3791-ec46-47c9-a61d-2dad2d67e563"><con:authProfile>Inherit From Parent</con:authProfile></con:entry><con:entry environmentId="ea7ba891-5369-4d68-be76-ff738b357a8d"><con:authProfile>Inherit From Parent</con:authProfile></con:entry><con:entry environmentId="d32ca7f9-7f15-406a-b283-82aea268796e"><con:authProfile>Inherit From Parent</con:authProfile></con:entry><con:entry environmentId="472fc935-ce99-435f-a108-237792822ece"><con:authProfile>Inherit From Parent</con:authProfile></con:entry><con:entry environmentId="1693b6ef-728c-4bd3-98f6-b40edae1b2a0"><con:authProfile>Inherit From Parent</con:authProfile></con:entry></con:environmentSpec></con:request></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" id="d9c3ded2-864d-402b-9618-5f5cc423af06"><con:settings/><con:config><script>import groovy.xml.*
import jxl.*
import jxl.write.*
import java.lang.*

//xml parsing setup
def responseAsXml = context.expand( '${JDBC Request#ResponseAsXml#//Results[1]/ResultSet[1]/Row[1]}' )

def response = context.expand( '${GetMemberInformation - Request 1#Response#declare namespace ns1=\'urn://com.bupa.bi.members.GetMemberInformation_v1_0\'; //ns1:MemberInformationResponse[1]/ns1:Member[1]}' )


def responsexml = new XmlSlurper().parseText(response)
def dbxml = new XmlSlurper().parseText(responseAsXml)
def dbclaimscount= dbxml.children().size()
def responseclaimscount = responsexml.children().size()
def dbfields= dbxml.children().size()
def responsefields= responsexml.children().size()
assertionstep=testRunner.testCase.testSteps["GetMemberInformation"]

log.info dbclaimscount
log.info responseclaimscount
log.info responsefields


if(dbclaimscount==responseclaimscount)
{
                //excel setup
                WritableWorkbook workbook1 = Workbook.createWorkbook(new File("C:/API/Others/Output Systest1/getmemberinformation.xls"))
                WritableSheet sheet1 = workbook1.createSheet("GetMemberInformation Results",0)
                Label rlabel= new Label(1,0, "Response Fields")
                Label dblabel= new Label(2,0, "Database Fields")
                Label vlabel= new Label(3,0, "Verification Result")
                sheet1.addCell(rlabel)
                sheet1.addCell(dblabel)
                sheet1.addCell(vlabel)
                
                log.info "equal claims count of " + dbclaimscount
                def clocation=1

                for( i=0;i&lt;responseclaimscount;i++)
                {
                                log.info "Database Verification of Claim ID:"+responsexml.children()[i].children()[0] 
                                log.info "count="+i
                                def status;
                                                                
                                                responsefield=responsexml.children()[i]
                                                dbfield=dbxml.children()[i]
                                                def dbvalue=dbfield
                                                log.info responsefield.name()+": "+responsefield+"  "+dbfield.name()+": "+dbvalue
                                               
                                                if((dbfield.name()=="DATEOFBIRTH")||(dbfield.name()=="ORIGINALJOINDATE"))
                                                {
                                                                
                                                                dbvalue=dbfield.toString().replaceFirst(" ","T").replaceFirst("00:00:00.0","00:00:00")
                                                }
                                                if(responsefield==dbvalue)
                                                {
                                                                log.info responsefield.name()+" passed verification"
                                                                status="Pass"

                                                }
                                                else
                                                {
                                                                if(responsefield.name()=="SpecialHandling")
                                                                {
                                                                                status="N/A"
                                                                }
                                                                else{
                                                                                log.info responsefield.name()+" failed verification"
                                                                                status="Fail"
                                                                }
                                                }
                                                log.info "writing fields to excel"
                                                Label l0= new Label(0,clocation, responsefield.name())
                                                Label l1= new Label(1,clocation,responsefield.toString())
                                                Label l2= new Label(2,clocation,dbvalue.toString())
                                                Label l3= new Label(3,clocation,status)
                                                sheet1.addCell(l0)
                                                sheet1.addCell(l1)
                                                sheet1.addCell(l2)
                                                sheet1.addCell(l3)
                                                clocation++
                                                /*assertion=assertionstep.addAssertion("XPath Match")
                                                assertion.path="\""+responsefield+"\""
                                                assertion.expectedContent=dbfield
                                                assertion.name="Check "+responsefield.name()*/
               	                 

			}
                workbook1.write()
                workbook1.close()
                log.info "finished export to excel"
}
</script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>ca02d1a6-89e1-43e9-988d-6bbb72db49e7</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:environmentSpec><con:entry environmentId="ffa02281-abee-4d92-9d74-c677c51cd899"><con:authProfile>Inherit From Parent</con:authProfile></con:entry><con:entry environmentId="da7c9196-ba3b-41d0-a66d-0a23ca4256ba"><con:authProfile>Inherit From Parent</con:authProfile></con:entry><con:entry environmentId="2e2d3644-d234-40cc-bc7a-aa84e98bab33"><con:authProfile>Inherit From Parent</con:authProfile></con:entry><con:entry environmentId="abef8391-6af3-433a-b3bb-9504a88cd8e9"><con:authProfile>Inherit From Parent</con:authProfile></con:entry><con:entry environmentId="6f08d644-a5bc-4490-920b-48a60b2d8e41"><con:authProfile>Inherit From Parent</con:authProfile></con:entry><con:entry environmentId="64e0791f-4ed5-4997-966c-88e83c52740b"><con:authProfile>Inherit From Parent</con:authProfile></con:entry><con:entry environmentId="6f2ca154-2593-4d31-9605-d7f796e04a87"><con:authProfile>Inherit From Parent</con:authProfile></con:entry><con:entry environmentId="5650c0e1-78a8-46fa-87b8-a891fcd675df"><con:authProfile>Inherit From Parent</con:authProfile></con:entry><con:entry environmentId="43d00641-0327-48c2-8143-b4a8c3cc7a15"><con:authProfile>Inherit From Parent</con:authProfile></con:entry><con:entry environmentId="d569c580-5769-4daf-af9e-5bf59356fdbc"><con:authProfile>Inherit From Parent</con:authProfile></con:entry><con:entry environmentId="838914ec-42f6-42ce-a432-f18913224d4a"><con:authProfile>Inherit From Parent</con:authProfile></con:entry><con:entry environmentId="4b1f3791-ec46-47c9-a61d-2dad2d67e563"><con:authProfile>Inherit From Parent</con:authProfile></con:entry><con:entry environmentId="ea7ba891-5369-4d68-be76-ff738b357a8d"><con:authProfile>Inherit From Parent</con:authProfile></con:entry><con:entry environmentId="d32ca7f9-7f15-406a-b283-82aea268796e"><con:authProfile>Inherit From Parent</con:authProfile></con:entry><con:entry environmentId="472fc935-ce99-435f-a108-237792822ece"><con:authProfile>Inherit From Parent</con:authProfile></con:entry><con:entry environmentId="1693b6ef-728c-4bd3-98f6-b40edae1b2a0"><con:authProfile>Inherit From Parent</con:authProfile></con:entry></con:environmentSpec></con:testCase>
